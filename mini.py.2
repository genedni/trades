# /usr/bin/env python3

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
import random
import logging

# Set up logging for debugging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def gendata():
    maxval=100.0
    dates=pd.date_range('2023-01-01', periods=1000)
    bias=0.00
    df = pd.DataFrame(columns=['Date', 'Open', 'High', 'Low', 'Close',])
    for d in dates: 
        vallist = []
        for i in range(0,4):
           vallist.append(random.random() * maxval) 
        logger.debug(f"Vallist: {vallist} {type(vallist)}")

        openval = vallist[random.randint(0,3)] + bias
        highval = max(vallist) + bias
        lowval = min(vallist) + bias
        closeval = vallist[random.randint(0,3)] + bias
        new_row = {
            'Date': d, 
            'Open': openval, 
            'High': highval,
            'Low': lowval,
            'Close': closeval,
        }
        try:
            new_row_df = pd.DataFrame([new_row])
            df = pd.concat([df, new_row_df], ignore_index=True)
            logger.debug(df)
        except Exception as e:
            print(f"Error adding row: {e}")
        bias = bias + 1.0

    return df

# Initialize the Dash app
app = Dash(__name__)

df = gendata()

# App layout
app.layout = html.Div([
    html.H3("OHLC Stock Chart with Adjustable Viewport"),
    dcc.DatePickerRange(
        id='date-picker',
        min_date_allowed=df['Date'].min(),
        max_date_allowed=df['Date'].max(),
        initial_visible_month=df['Date'].max(),
        start_date=df['Date'].min(),
        end_date=df['Date'].max(),
        style={'margin-bottom': '20px'}
    ),
    dcc.Graph(id='ohlc-chart'),
])

# Callback to update the OHLC chart and dynamically scale y-axis
@app.callback(
    Output('ohlc-chart', 'figure'),
    [Input('date-picker', 'start_date'),
     Input('date-picker', 'end_date')]
)
def update_chart(start_date, end_date):
    # Filter data based on selected date range
    filtered_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
    
    # Create OHLC chart
    fig = go.Figure(data=go.Ohlc(
        x=filtered_df['Date'],
        open=filtered_df['Open'],
        high=filtered_df['High'],
        low=filtered_df['Low'],
        close=filtered_df['Close']
    ))
    
    # Dynamically scale y-axis based on visible data
    y_min = filtered_df['Low'].min() * 0.95  # Add 5% padding below
    y_max = filtered_df['High'].max() * 1.05  # Add 5% padding above
    
    # Update layout
    fig.update_layout(
        title='AAPL OHLC Chart',
        xaxis_title='Date',
        yaxis_title='Price (USD)',
        yaxis=dict(range=[y_min, y_max]),  # Set dynamic y-axis range
        xaxis=dict(
            rangeslider=dict(visible=False),
            type='date',
        ),
        margin=dict(l=50, r=50, t=50, b=50),
        height=500
    )
    
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)

