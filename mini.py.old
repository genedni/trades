#!/usr/bin/env python3

from dash import Dash, dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd
import yfinance as yf
import logging
import random

# Set up logging for debugging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Fetch sample stock data (e.g., Apple)
#try:
#    stock_data = yf.download('AAPL', start='2024-01-01', end='2025-04-22', progress=False)
#    if stock_data.empty:
#        logger.error("No data returned from yfinance for AAPL")
#        raise ValueError("No data available for the specified ticker and date range")
#    df = stock_data.reset_index()[['Date', 'Open', 'High', 'Low', 'Close']]
#    logger.info(f"Data fetched successfully: {len(df)} rows")
#except Exception as e:
#    logger.error(f"Error fetching data: {e}")
#    df = pd.DataFrame(columns=['Date', 'Open', 'High', 'Low', 'Close'])  # Fallback empty DataFrame

def generate_random_list(length, min_val, max_val):
    return [random.randint(min_val, max_val) for _ in range(length)]

def gendata():
    maxval=100.0
    dates=pd.date_range('2023-01-01', periods=1000)
    bias=0.00
    df = pd.DataFrame(columns=['Date', 'Open', 'High', 'Low', 'Close',])
    for d in dates: 
        vallist = []
        for i in range(0,4):
           vallist.append(random.random() * maxval) 
        logger.debug(f"Vallist: {vallist} {type(vallist)}")

        openval = vallist[random.randint(0,3)] + bias
        highval = max(vallist) + bias
        lowval = min(vallist) + bias
        closeval = vallist[random.randint(0,3)] + bias
        new_row = {
            'Date': d, 
            'Open': openval, 
            'High': highval,
            'Low': lowval,
            'Close': closeval,
        }
        try:
            new_row_df = pd.DataFrame([new_row])
            df = pd.concat([df, new_row_df], ignore_index=True)
            logger.debug(df)
        except Exception as e:
            print(f"Error adding row: {e}")
        bias = bias + 1.0

    return df

# Initialize the Dash app
app = Dash(__name__)

df = gendata()

# App layout
app.layout = html.Div([
    html.H3("OHLC Stock Chart with Adjustable Viewport"),
    dcc.DatePickerRange(
        id='date-picker',
        min_date_allowed=df['Date'].min() if not df.empty else '2024-01-01',
        max_date_allowed=df['Date'].max() if not df.empty else '2025-04-22',
        initial_visible_month=df['Date'].max() if not df.empty else '2025-04-22',
        start_date=df['Date'].min() if not df.empty else '2024-01-01',
        end_date=df['Date'].max() if not df.empty else '2025-04-22',
        style={'margin-bottom': '20px'},
    ),
    dcc.RangeSlider(
        id='viewport-slider',
        min=0,
        max=len(df) -1 if not df.empty else 100,
        step=1,
        value=[0, len(df) -1] if not df.empty else [0, 100],
        marks={i: str(i) for i in range(0, len(df), len(df)//5)},
        tooltip={'placement': 'bottom', 'always_visible': True},
    ),
    dcc.Graph(id='ohlc-chart',),
])

# Callback to update the OHLC chart and dynamically scale y-axis
@app.callback(
    Output('ohlc-chart', 'figure'),
    [Input('date-picker', 'start_date'),
     Input('date-picker', 'end_date'),
     Input('viewport-slider', 'value')]
)
def update_chart(start_date, end_date, viewport_range):
    if df.empty:
        logger.warning("No data available to plot")
        return go.Figure(
            layout=dict(
                title="No Data Available",
                xaxis=dict(title="Date"),
                yaxis=dict(title="Price (USD)"),
                annotations=[dict(text="No stock data to display", x=0.5, y=0.5, showarrow=False)]
            )
        )

    # Filter data based on selected date range
    filtered_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
    logger.info(f"Filtered data: {len(filtered_df)} rows for {start_date} to {end_date}")

    if filtered_df.empty:
        logger.warning("No data in selected date range")
        return go.Figure(
            layout=dict(
                title="No Data in Selected Range",
                xaxis=dict(title="Date"),
                yaxis=dict(title="Price (USD)"),
                annotations=[dict(text="No data for selected date range", x=0.5, y=0.5, showarrow=False)]
            )
        )

    # Further filter based on viewport slider (index-based)
    start_idx, end_idx = viewport_range
    if start_idx < 0 or end_idx >= len(filtered_df):
        logger.warning("Invalid viewport range")
        start_idx = end_idx = 0, len(filtered_df) - 1
    viewport_df = filtered_df.iloc[start_idx:end_idx]

    if viewport_df.empty:
        logger.warning("No data in selected viewport")
        return go.Figure(
                layout=dict(
                    title="No Data in Selected Viewport",
                    xaxis=dict(title="Date"),
                    yaxis=dict(title="Price (USD)"),
                    annotations=[dict(text="No data for selected viewport", x=0.5,y=0.5, showarror=False)]
                )
        )

    # Create OHLC chart
    fig = go.Figure(data=go.Ohlc(
        x=viewport_df['Date'],
        open=viewport_df['Open'],
        high=viewport_df['High'],
        low=viewport_df['Low'],
        close=viewport_df['Close']
    ))

    # Dynamically scale y-axis based on visible data
    y_min = viewport_df['Low'].min() * 0.95  # 5% padding below
    y_max = viewport_df['High'].max() * 1.05  # 5% padding above
    logger.debug(f"y_min: {y_min} y_max: {y_max}")

    # Update layout
    fig.update_layout(
        title='AAPL OHLC Chart',
        xaxis_title='Date',
        yaxis_title='Price (USD)',
        yaxis=dict(range=[y_min, y_max]),
        margin=dict(l=50, r=50, t=50, b=50),
        height=500
    )

    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
